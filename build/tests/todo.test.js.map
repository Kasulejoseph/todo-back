{"version":3,"sources":["../../server/tests/todo.test.js"],"names":["chai","use","chaiHttp","should","testTodoObj","category","description","dueDate","missingCategoryObj","createTodo","todoObj","request","app","post","send","getOneTodo","id","get","describe","it","response","have","status","body","be","a","data","equal","errors","msg","todo","message","put","getTodo","tempory","length","delete"],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\n\nimport { app } from '../api'; \n\nchai.use(chaiHttp);\nchai.should();\n\nconst testTodoObj = {\n  category: \"test 1\",\n  description: \"the easiest and fastest way to get started using Recharts.\",\n  dueDate: \"2020-11-21\"\n}\n\nconst missingCategoryObj = {\n  description: \"the easiest and fastest way to get started using Recharts.\",\n  dueDate: \"2020-11-21\"\n}\n\n\n\nconst createTodo = async (todoObj=testTodoObj) => {\n  return await chai\n    .request(app)\n    .post('/todos/add')\n    .send(todoObj);\n};\n\nconst getOneTodo = async (id=1) => {\n  return await chai\n  .request(app)\n  .get(`/todos/${id}`)\n};\n\ndescribe('TODO', () => {\n  it('Should be able to add a new todo', async () => {\n    const response = await createTodo();\n    response.should.have.status(201);\n    response.body.should.be.a('object');\n    response.body.data.category.should.equal('test 1');\n  });\n\n  it('Should return a 400 when a field is missing', async () => {\n    const response = await createTodo(missingCategoryObj);\n    response.should.have.status(400);\n    response.body.errors[0].msg.should.equal('Category is required');\n  });\n\n  it('Should be able to get a single todo', async () => {\n    const response = await getOneTodo();\n    response.should.have.status(200);\n    response.body.todo.should.be.a('object');\n    response.body.todo.category.should.equal('test test');\n  })\n\n  it('Should return a 404 when id is invalid', async () => {\n    const response = await getOneTodo(1000);\n    response.should.have.status(404);\n    response.body.message.should.equal('todo not found');\n  })\n\n  it('Should be able to update a todo', async () => {\n    const response = await chai\n      .request(app)\n      .put('/todos/1')\n      .send({description: \"Item has been completed\",})\n    response.should.have.status(200);\n    response.body.message.should.equal('Successfully updated');\n    const getTodo = await getOneTodo();\n    getTodo.body.todo.description.should.equal('Item has been completed');\n  });\n\n  it('Should return a 400 when no field is updated', async () => {\n    const response = await chai\n      .request(app)\n      .put('/todos/1')\n      .send({tempory: \"Item has been completed\",})\n    response.should.have.status(400);\n    response.body.message.should.equal('No field was updated');\n  });\n\n  it('Should be able to get all todos', async () => {\n    const response = await chai\n      .request(app)\n      .get('/todos');\n    response.should.have.status(200);\n    response.body.data.should.be.a('array');\n    response.body.data[0].should.be.a('object');\n    response.body.data.should.have.length(2);\n  });\n\n  it('Should be able to delete a todo', async () => {\n    const response = await chai\n      .request(app)\n      .delete('/todos/2');\n    response.should.have.status(200);\n    response.body.message.should.equal('Todo has been successfully deleted');\n    \n    const getTodo = await getOneTodo(2);\n    getTodo.should.have.status(404);\n    getTodo.body.message.should.equal('todo not found');\n  });\n\n\n})\n"],"file":"todo.test.js"}